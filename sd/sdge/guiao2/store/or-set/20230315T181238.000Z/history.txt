2	:invoke	:remove	0
2	:info	:remove	0	indeterminate: throw+: {:type :rpc-error, :code 20, :name :unknown, :definite? false, :body {:msg_id 2, :in_reply_to 1, :type "error", :code 20, :message "element not in set"}}
5	:invoke	:remove	0
5	:info	:remove	0	indeterminate: throw+: {:type :rpc-error, :code 20, :name :unknown, :definite? false, :body {:msg_id 3, :in_reply_to 1, :type "error", :code 20, :message "element not in set"}}
0	:invoke	:add	0
1	:invoke	:read	nil
1	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n1 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 2, :in_reply_to 1, :type "read_ok", :value {"0" [["n0" 1]]}}

This is malformed because:

{:value (not (sequential? {"0" [["n0" 1]]}))}

See doc/protocol.md for more guidance.
4	:invoke	:read	nil
4	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n1 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 3, :in_reply_to 1, :type "read_ok", :value {"0" [["n0" 1]]}}

This is malformed because:

{:value (not (sequential? {"0" [["n0" 1]]}))}

See doc/protocol.md for more guidance.
7	:invoke	:add	1
8	:invoke	:add	2
0	:info	:add	0	indeterminate: Client read timeout
3	:invoke	:read	nil
3	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 4,
 :in_reply_to 1,
 :type "read_ok",
 :value {"0" [["n0" 1]], "1" [["n1" 1]]}}

This is malformed because:

{:value (not (sequential? a-clojure.lang.PersistentArrayMap))}

See doc/protocol.md for more guidance.
6	:invoke	:read	nil
6	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 5,
 :in_reply_to 1,
 :type "read_ok",
 :value {"0" [["n0" 1]], "1" [["n1" 1]]}}

This is malformed because:

{:value (not (sequential? a-clojure.lang.PersistentArrayMap))}

See doc/protocol.md for more guidance.
9	:invoke	:remove	1
8	:info	:add	2	indeterminate: Client read timeout
7	:info	:add	1	indeterminate: Client read timeout
11	:invoke	:read	nil
10	:invoke	:remove	2
10	:info	:remove	2	indeterminate: throw+: {:type :rpc-error, :code 20, :name :unknown, :definite? false, :body {:msg_id 6, :in_reply_to 1, :type "error", :code 20, :message "element not in set"}}
13	:invoke	:remove	3
13	:info	:remove	3	indeterminate: throw+: {:type :rpc-error, :code 20, :name :unknown, :definite? false, :body {:msg_id 7, :in_reply_to 1, :type "error", :code 20, :message "element not in set"}}
16	:invoke	:add	3
11	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n2 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 6,
 :in_reply_to 1,
 :type "read_ok",
 :value {"0" [["n0" 1]], "2" [["n2" 1]], "1" [["n1" 1]]}}

This is malformed because:

{:value (not (sequential? a-clojure.lang.PersistentArrayMap))}

See doc/protocol.md for more guidance.
14	:invoke	:remove	4
14	:info	:remove	4	indeterminate: throw+: {:type :rpc-error, :code 20, :name :unknown, :definite? false, :body {:msg_id 7, :in_reply_to 1, :type "error", :code 20, :message "element not in set"}}
17	:invoke	:read	nil
17	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n2 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 8,
 :in_reply_to 1,
 :type "read_ok",
 :value {"0" [["n0" 1]], "2" [["n2" 1]], "1" [["n1" 1]]}}

This is malformed because:

{:value (not (sequential? a-clojure.lang.PersistentArrayMap))}

See doc/protocol.md for more guidance.
20	:invoke	:remove	4
20	:info	:remove	4	indeterminate: throw+: {:type :rpc-error, :code 20, :name :unknown, :definite? false, :body {:msg_id 9, :in_reply_to 1, :type "error", :code 20, :message "element not in set"}}
23	:invoke	:remove	5
23	:info	:remove	5	indeterminate: throw+: {:type :rpc-error, :code 20, :name :unknown, :definite? false, :body {:msg_id 10, :in_reply_to 1, :type "error", :code 20, :message "element not in set"}}
26	:invoke	:read	nil
26	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n2 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 11,
 :in_reply_to 1,
 :type "read_ok",
 :value {"0" [["n0" 1]], "2" [["n2" 1]], "1" [["n1" 1]]}}

This is malformed because:

{:value (not (sequential? a-clojure.lang.PersistentArrayMap))}

See doc/protocol.md for more guidance.
29	:invoke	:add	4
9	:info	:remove	1	indeterminate: Client read timeout
12	:invoke	:add	5
16	:info	:add	3	indeterminate: Client read timeout
19	:invoke	:add	6
29	:info	:add	4	indeterminate: Client read timeout
32	:invoke	:add	7
12	:info	:add	5	indeterminate: Client read timeout
19	:info	:add	6	indeterminate: Client read timeout
32	:info	:add	7	indeterminate: Client read timeout
22	:invoke	:read	nil
15	:invoke	:read	nil
35	:invoke	:read	nil
22	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n1 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 12,
 :in_reply_to 1,
 :type "read_ok",
 :value
 {"0" [["n0" 1]], "1" [["n1" 1]], "3" [["n1" 2]], "6" [["n1" 3]]}}

This is malformed because:

{:value (not (sequential? a-clojure.lang.PersistentArrayMap))}

See doc/protocol.md for more guidance.
35	:info	:read	nil	indeterminate: Malformed RPC response. Maelstrom sent node n2 the following request:

{:type "read", :msg_id 1}

And expected a response of the form:

{:type (eq "read_ok"), :value [Any], {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:msg_id 16,
 :in_reply_to 1,
 :type "read_ok",
 :value
 {"0" [["n0" 1]],
  "2" [["n2" 1]],
  "1" [["n1" 1]],
  "4" [["n2" 2]],
  "7" [["n2" 3]]}}

This is malformed because:

{:value (not (sequential? a-clojure.lang.PersistentArrayMap))}

See doc/protocol.md for more guidance.
15	:info	:read	nil	indeterminate: Client read timeout
